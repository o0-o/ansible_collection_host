---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Configure the Python interpreter
#
########################################################################

- name: Run tasks to test the Python interpreter
  ansible.builtin.include_tasks: test_python_ssh.yml
  when: ansible_python_interpreter | default('') != ''

# This will retry Python test if a Python interpreter is found
- name: Run tasks to define the Python interpreter
  ansible.builtin.include_tasks: def_python_ssh_raw.yml
  when: ansible_python_interpreter | default('') == ''

# This will retry defining and resting the Python interpreter after
# installation.
- name: Run tasks to install Python
  ansible.builtin.include_tasks: install_python_ssh_raw.yml
  when: ansible_python_interpreter | default('') == ''

- name: Re-run previously completed roles if the Python interpreter has changed
  ansible.builtin.include_role:
    name: "{{ prev_role_item }}"
    allow_duplicates: true
    public: true
  when:
    - def_python_reg is changed or install_python_reg | default({}) is changed
    - prev_role_item in ansible_role_names
    - prev_role_item not in ansible_parent_role_names
    - not ( prev_role_item == 'o0_o.host.privilege_escalation'
            and ansible_user == 'root' )
  loop:
    - o0_o.host.facts
    - o0_o.host.time
    - o0_o.host.privilege_escalation
    - o0_o.host.software_management
  loop_control:
    loop_var: prev_role_item
