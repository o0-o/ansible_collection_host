---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Gather facts on an SSH host
#
########################################################################

- name: Gather facts
  ansible.builtin.setup:

- name: Gather service facts
  ansible.builtin.service_facts:
  become: true

- name: Run tasks to gather additional platform-specific facts
  ansible.builtin.include_tasks:
    file: "{{ lookup( 'o0_o.host.first_found_by_host_attributes',
                      'tasks',
                      prefix='gather_facts_ssh_',
                      skip=true ) }}"

# Ansible does not gather serial numbers on Raspberry Pis, and
# possibly other similar ARM boards.
- name: If no serial number is gathered, check for one
  when: ansible_product_serial | default('')  == ''
  block:

    - name: Look for a serial number in /sys/firmware/devicetree/base
      ansible.builtin.slurp:
        src: /sys/firmware/devicetree/base/serial-number
      register: serial_reg

    - name: Define the serial number
      ansible.builtin.set_fact:
        ansible_product_serial: "{{ serial_reg['content'] | b64decode }}"

    # See defaults/main.yml for bad serials list
    - name: Serial looks unique
      ansible.builtin.assert:
        that: ansible_product_serial not in bad_serials

  rescue:

    - name: "WARNING: serial number is not found or not unique"
      ansible.builtin.debug:
        msg: >-
          ansible_product_serial={{ ansible_product_serial | default('') }}

- name: Try to use the which command
  ansible.builtin.command: which which
  register: which_reg
  changed_when: false
  failed_when: false

- name: Try to use command
  ansible.builtin.command: command -v command
  register: command_reg
  changed_when: false
  failed_when: false

- name: Define which command
  ansible.builtin.set_fact:
    which_command: "{{  ( command_reg['rc'] | default(1) == 0 )
                        | ternary('command -v', which_var) }}"
  vars:
    which_var: "{{ which_reg['stdout_lines'][0] }}"
