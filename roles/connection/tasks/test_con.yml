---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Test connection
#
########################################################################

# This will run either test_con_ssh.yml or test_con_routeros.yml
- name: Run tasks to test the connection
  ansible.builtin.include_tasks:
    file: "{{ lookup( 'o0_o.host.first_found_by_host_attributes',
                      'tasks',
                      prefix='test_con_' ) }}"

# Do not accept connections to localhost on default port 22 (prevents
# accidentally targeting localhost when configuring virtual hosts on
# local NAT). To target localhost, use the local connection type or
# SSH with an ansible_host value other than 127.0.0.1.
- name: The connection was valid and successful
  ansible.builtin.set_fact:
    use_con: true
  when:
    - >-
        not ( ansible_host == '127.0.0.1'
              and ansible_port | default('22') | string == '22' )
    # rescue will not catch a failure from an unreachable host, so we
    # ignore unreachable during the test, and fail here instead so that
    # the rescue portion of the block will be triggered.
    - not test_con_reg is failed
    - not test_con_reg is unreachable

- name: Scope functional connection variables for general use
  ansible.builtin.set_fact:
    "{{ var_item }}": "{{ vars[var_item] }}"
  changed_when: >-
    pre_vars[var_item] is undefined
    or pre_vars[var_item] | default != vars[var_item]
  when:
    - use_con
    - vars[var_item] is defined
  loop:
    - ansible_host
    - ansible_connection
    - ansible_port
    - ansible_ssh_private_key_file
    - ansible_user
    - ansible_network_os
    - ansible_network_cli_ssh_type
  loop_control:
    loop_var: var_item
  notify: update host inventory variables
