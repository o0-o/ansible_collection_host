---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Configure Ansible's connection to the host
#
# If an initial connection attempt is unsuccessful, attempt to discover
# the correct parameters. Upon a successful connection, write
# connection-related Ansible variables to the host_vars file.
#
########################################################################

- name: BEGIN HOST CONNECTION ROLE
  ansible.builtin.set_fact:
    role_call_ident: "{{ ident_var }}"
    role_call: "{{ role_call | default([]) + line_var }}"
  vars:
    ident_var: "{{ role_call_ident | default(-1) | int + 1 }}"
    line_var:
      - "{{ ( '  ' * ident_var | int ) | string + ansible_role_name }}"

- name: Run the o0_o.inventory role
  ansible.builtin.include_role:
    name: o0_o.inventory
    allow_duplicates: false
    public: true

# Prevents some misbehavior.
- name: Define the Ansible host and connection
  ansible.builtin.set_fact:
    ansible_host: "{{ ansible_host }}"
    ansible_connection: "{{ ansible_connection }}"

- name: "Install/update pip and {{ net_ssh_method }}"
  ansible.builtin.pip:
    name:
      - pip
      - "{{ net_ssh_pkg_var }}"
    state: latest
  delegate_to: 127.0.0.1
  run_once: true
  vars:
    net_ssh_pkg_var: >-
      {{  ( net_ssh_method == 'libssh' )
          | ternary('ansible-pylibssh', 'paramiko') }}
  when: net_ssh_method in ['libssh', 'paramiko']

- name: Run tasks to test the connection with existing configuration
  ansible.builtin.include_tasks: test_con.yml

- name: Run tasks to configure the connection if necessary
  ansible.builtin.include_tasks: cfg_con.yml
  when: not use_con

- name: END HOST CONNECTION ROLE
  ansible.builtin.set_fact:
    role_call_ident: "{{ role_call_ident | int - 1 }}"
