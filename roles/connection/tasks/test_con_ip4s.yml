---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Test connection using all known host IPs
#
########################################################################

# See the o0_o.network collection for a description of the hosts
# dictionary and ifaces list.
- name: Define a list of possible IPv4 addresses from subnet defintions
  ansible.builtin.set_fact:
    con_ip4s: >-
      {{  ( hosts[inventory_hostname]
            | default( hosts[inventory_hostname_short] )
            | default({}) ).values()
          | list
          | union( ifaces | default([]) )
          | selectattr('ip4', 'defined')
          | map(attribute='ip4')
          | sort
          | unique }}
  when: con_ip4s is undefined

- name: The IPv4 address list is not exhausted
  ansible.builtin.assert:
    that: con_ip4s != []
    quiet: true

- name: Try the connection with different IPv4 addresses
  block:

    - name: Reset the connection user list to all possible administrators
      ansible.builtin.set_fact:
        con_adms: "{{ possible_adms }}"

    - name: >-
        Run tasks to test the connection with IPv4 address {{ ansible_host }}
        and different users
      ansible.builtin.include_tasks: test_con_users.yml
      vars:
        ansible_host: "{{ con_ip4s | first }}"

  rescue:

    - name: Remove invalid IPv4 address from the list
      ansible.builtin.set_fact:
        con_ip4s: "{{ con_ip4s[1:] }}"

    - name: Recursively run this tasks file
      ansible.builtin.include_tasks: test_con_ip4s.yml
