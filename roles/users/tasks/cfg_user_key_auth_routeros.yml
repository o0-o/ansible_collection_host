---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Configure a user's authorized SSH key on a RouterOS host
#
########################################################################

- name: Configure each authorized SSH key for the user (RouterOS)
  community.routeros.command:
    commands:
      - "/user/ssh-keys add key=\"{{ key_var }}\" user={{ user_name }}"
  vars:
    pub_no_equal_var: "{{ key_item['pub'][:-2] | join }}"
    key_var: >-
      ssh-{{ key_item['type'] }} {{ key_item['pub'] }} {{ pub_no_equal_var }}
  register: ros_cfg_user_auth_ssh_key_reg
  failed_when: "ros_cfg_user_auth_ssh_key_reg['stdout_lines'][0][0]
    == 'failure: unable to load key file (wrong format or bad passphrase)!'"
  when: key_item not in current_auth_keys_var

- name: Remove extra or erroneous authorized SSH keys (RouterOS)
  community.routeros.command:
    commands:
      - "/user/ssh-keys remove numbers=[/user/ssh-keys find
        key-owner={{ key_item['pub'][:-2] }}]"
  register: ros_del_user_auth_ssh_keys_reg
  when:
    key_item not in user_var['ssh']['auth'] | default([])
    or key_item['pub'] | regex_search('^AAAAB3NzaC1yc2E.*$') == none

# Preserves the most recent key
- name: Remove duplicate authorized SSH keys (RouterOS)
  community.routeros.command:
    commands:
      - "/user/ssh-keys remove numbers=[:pick [/user/ssh-keys/ find
        key-owner=\"{{ key_item['pub'][:-2] }}\"] 0 ( [:len [/user/ssh-keys/
        find key-owner=\"{{ key_item['pub'][:-2] }}\"]] - 1 )]"
  register: ros_del_user_auth_ssh_dupe_keys_reg
  when: current_auth_keys_var != current_auth_keys_var | unique

- name: Record user configuration change
  ansible.builtin.set_fact:
    user_change: true
  when:
    ros_cfg_user_auth_ssh_key_reg is changed
    or ros_del_user_auth_ssh_keys_reg is changed
    or ros_del_user_auth_ssh_dupe_keys_reg is changed
